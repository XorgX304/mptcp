#!/bin/bash
testlength=60
printinterval=10

inittestlength=$testlength
testname=$1
direction=$2
both="no"
base=`dirname $0`
base=`realpath $base`

if [[ $UID -eq 0 ]]; then
  echo -e "\e[31mThis script should not be run as root\e[0m"
  exit 1
fi

ips=`ip addr | grep "inet " | grep -v " 127." | sed 's/^[^0-9]*\([0-9\.]\+\).*$/\1/'`
if [[ `echo "$ips" | wc -l` -ne 2 ]]; then
  echo -e "\e[31mThis script only works with two ips\e[0m"
  exit 1
fi

ips=($ips)

if [[ -z $1 || -z $2 ]]; then
  echo "Usage: $0 <name> <down|up> [server] [floor]"
  exit 1
fi

# Make the user type her password as early as possible
sudo echo -n

if [[ $direction == 'both' ]]; then
  direction="up"
  both="yes"
fi

echo -e "==> Preparing \e[37m${direction}link\e[0m interrupt test \e[37m$testname\e[0m"

mkdir -p "$testname-$direction"
cd "$testname-$direction"

echo "  -> Disabling MPTCP: "
sudo sysctl -w net.mptcp.mptcp_enabled=0

echo -en "  -> Finding primary local IP: "
ip=`ip addr | grep "inet " | grep -v " 127." | sed 's/^[^0-9]*\([0-9\.]\+\).*$/\1/' | head -n1`

if [[ -z $ip ]]; then
  echo -e "\e[1;5;31mnone found!\e[0m"
  cd ..
  rm -rf "$testname-$direction"
  exit 1
else
  echo -e "\e[37m$ip\e[0m"
fi

if [[ -z $3 ]]; then
  if [[ ! -z `echo $ip | grep -P "^128\.16\.8"` ]]; then
    echo -e "  -> Running mp-routes"
    echo "-----------------------------------------"
    $base/mp-routes
    echo "-----------------------------------------"
  else
    echo -e "\e[37m  -> Not running mp-routes outside 128.16.80.0/22\e[0m"
  fi
fi

if [[ -z $3 ]]; then
  echo -en "==> Detecting testing server: "
  ap=`iwconfig 2>/dev/null | grep "ESSID:" | grep -E "fry-wifi|zoidberg-wifi" | sed 's/^.*ESSID:"\(.*\)-wifi".*$/\1/' | head -n1`

  if [[ -z $ap ]]; then
    echo -e "\e[1;31mundetectable\e[0m"
    echo -ne "\e[1m  ?? Use testing server \e[37m"
    read ap
    echo -en "\e[0m"
  else
    echo -e "\e[37m$ap\e[0m"
  fi
else
  ap=$3
  echo -e "==> Using testing server \e[37m$ap\e[0m"
fi

echo -e "==> Noting test context"

echo -en "  -> Stack info...\t\t\t"
echo "" > stack.log
uname -a >> stack.log
echo "tcp_congestion_control" >> stack.log
cat /proc/sys/net/ipv4/tcp_congestion_control >> stack.log
echo "tcp_mem" >> stack.log
cat /proc/sys/net/ipv4/tcp_mem >> stack.log
echo "tcp_wmem" >> stack.log
cat /proc/sys/net/ipv4/tcp_wmem >> stack.log
echo "wmem_default" >> stack.log
cat /proc/sys/net/core/wmem_default >> stack.log
echo "wmem_max" >> stack.log
cat /proc/sys/net/core/wmem_max >> stack.log
echo -e "\e[37m done\e[0m"

echo -en "  -> IP addresses...\t\t\t"
ip addr > ips.log
echo -e "\e[37m done\e[0m"

echo -en "  -> Wireless connection details...\t"
iwconfig 2>/dev/null > iwconfig.log
echo -e "\e[37m done\e[0m"

if [[ -z $4 ]]; then
  echo -en "\e[1m  ?? Enter floor:\t\t\t\e[37m  th\e[0m"
  echo -en "\r\e[1m  ?? Enter floor:\t\t\t\e[37m "
  read floor
  echo -en "\e[0m"
else
  floor=$4
fi

echo -en "  -> Test report outline...\t\t";
echo -n "TEST NAME: $testname interrupt
DONE BY: `whoami`@`hostname`

TEST TIME: `date`
TEST LOCATION: ${floor}TH FLOOR MPEB
TEST DURATION: 1.5 HOURS" > test.txt
echo -e "\e[37m done\e[0m"

is=`iwconfig 2>&1 | grep ESSID | grep -v off | sed 's/^\([^ ]\+\) .*/\1/' | sort | head -n1`
echo -en "  -> Wireless environment...\t\t"
sudo iwlist $is scan > iwlist.log
echo -e "\e[37m done\e[0m"

echo -e "==> Starting services"

echo -en "  -> Starting tcpdump...\t\t"
sudo tcpdump -tt -qni any udp and host $ap 2>/dev/null > tcpdump.pcap &
if [[ $? -gt 0 ]]; then
  echo -e "\e[31m fail\e[0m"
  cd ..
  rm -rf "$testname-$direction"
  exit 1
else
  echo -e "\e[37m done\e[0m"
fi

netserver_started=`pidof netserver`
if [[ $direction == "down" && -z "$netserver_started" ]]; then
  for net in ${ips[0]} ${ips[1]}; do
    echo -ne "  -> Starting netserver on \e[37m$net\e[0m"
    netserver -L $net > /dev/null 2> /dev/null
    echo -e "\e[37m done\e[0m"
  done
  netserver_started=1
else
  netserver_started=0
fi

echo -en "  -> Starting stats gatherer...\t\t"
$base/mp-stats 1s $ap > stats.log &
stats_pid=$!
echo -e "\e[37m done\e[0m"

echo -en "  -> Starting fifo\t\t\t"
FIFONAME=/tmp/myfifo.$$
rm -f $FIFONAME
mkfifo $FIFONAME
echo "" > perf.log
cat $FIFONAME | tee -a perf.log
echo -e "\e[37m done\e[0m"

if [[ $direction == "down" ]]; then
  echo -ne "==> Running performance test (remote) against \e[37m${ips[0]}\e[0m"
else
  echo -ne "==> Running performance test on \e[37m${ips[0]}\e[0m"
fi
echo -e " for \e[37m$testlength/$printinterval\e[0m seconds"

err=1
int=0
while [[ $err -gt 0 ]]; do
  begin=`date +%s`
  echo -ne "\e[34;2m"

  testpid=0
  if [[ $direction == "down" ]]; then
    ssh msc@$ap netperf -t UDP_STREAM -P 0 -H ${ips[0]} -l $testlength -D $printinterval > $FIFONAME &
    err=$?
    testpid=$!
  else
    netperf -t UDP_STREAM -P 0 -L ${ips[0]} -H $ap -l $testlength -D $printinterval > $FIFONAME &
    err=$?
    testpid=$!
  fi

  err=0
  while [[ $err -eq 0 && $testlength -gt 0 ]]; do
    if [[ $int -eq 0 ]]; then
      echo -e "\e[0m\e[37m==> Sleeping for $printinterval seconds\e[34;2m"
      sleep $printinterval
      err=$?
      int=1
    else
      echo -e "\e[0m\e[37m==> Interrupting with ${ips[1]} for $printinterval seconds\e[34;2m"
      if [[ $direction == "down" ]]; then
        ssh msc@$ap netperf -t UDP_STREAM -P 0 -H ${ips[1]} -l $printinterval 2>&1 >/dev/null
        err=$?
      else
        netperf -t UDP_STREAM -P 0 -L ${ips[1]} -H $ap -l $printinterval 2>&1 >/dev/null
        err=$?
      fi
      int=0
    fi

    end=`date +%s`
    testlength=`echo "$testlength-($end-$begin)" | bc`
    begin=$end
  done

  if [[ $err -gt 0 ]]; then
    int=0
    kill $testpid
  else
    wait $testpid
  fi

  echo -ne "\e[0m"

  if [[ $err -gt 0 ]]; then
    echo -e "\e[1;31mTest interrupted with ${testlength}s left"
    echo -ne "Press enter to continue or Ctrl+D to end test\e[0m"
    read

    if [[ $? -gt 0 ]]; then
      echo
      break
    fi

    echo -e "==> Running test for another \e[37m$testlength\e[0m seconds"
  fi
done

# sudo might have timed out by now
sudo echo -n

echo -e "==> Stopping services..."
echo -en "  -> Stopping tcpdump...\t\t"
sudo pkill tcpdump
echo -e "\e[37m done\e[0m"

echo -en "  -> Stopping stats gatherer...\t\t"
kill $stats_pid
wait $stats_pid 2>/dev/null # http://stackoverflow.com/a/5722850
echo -e "\e[37m done\e[0m"

echo -en "  -> Ending fifo\t\t\t"
rm $FIFONAME
echo -e "\e[37m done\e[0m"

if [[ $netserver_started -gt 0 ]]; then
  for net in $ips; do
    echo -ne "  -> Stopping netserver on $net"
    pkill netserver
    echo -e "\e[37m done\e[0m"
  done
fi

echo -e "==> Compressing data..."

echo -en "  -> Compressing iwlist...\t\t"
gzip -f8 iwlist.log
echo -e "\e[37m done\e[0m"

echo -en "  -> Compressing stats...\t\t"
gzip -f8 stats.log
echo -e "\e[37m done\e[0m"

echo -en "  -> Compressing tcpdump...\t\t"
gzip -f8 tcpdump.pcap
echo -e "\e[37m done\e[0m"

echo "==> Enabling MPTCP: "
sudo sysctl -w net.mptcp.mptcp_enabled=1

if [[ $err -gt 0 ]]; then
  if [[ $testlength -eq $inittestlength ]]; then
    echo -e "\e[31m==> Test failed to run =(\e[0m"
  else
    echo -e "\e[33m==> Test only partially completed =/\e[0m"
  fi
else
  echo -e "\e[32m==> Test completed successfully =)\e[0m"
fi

if [[ $both == 'yes' ]]; then
  if [[ $err -gt 0 ]]; then
    echo -e "\e[33m==> Not running downlink test after premature exit\e[0m"
  else
    cd ..
    echo
    $base/mp-int $testname down $ap $floor
  fi
fi

# vim:textwidth=0:
