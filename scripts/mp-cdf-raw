#!/bin/bash
base="$(dirname "$0")"
base="$(realpath "$base")"
source "$base/common.sh"

display=1
if [[ $1 == "-g" ]]; then
  display=0
  shift
fi

if [[ $# -eq 0 ]]; then
  echo "Usage: $(basename "$0") [-g] [DAT]..."
  echo "For each DAT file, calculates and displays the CDF"
  echo -n "The -g flag will force $(basename "$0") only generate the CDF files,"
  echo    " but not display the resulting CDF"
  exit 1
fi

runr() {
  f=`bpsf "$1"`

  cut -d' ' -f$f "$1" | sort -n | \
    # http://stackoverflow.com/questions/16493669/how-to-read-input-from-the-terminal-using-dev-stdin-and-read-csv
  R -q -e "x <- read.csv(file='stdin', header = F); \
           Fn <- ecdf(x[,1]); \
           t <- data.frame(knots(Fn), Fn(knots(Fn))); \
           t" | \
    grep -v ">" | grep -v "knots" | awk '{ print $2 " " $3 }'
}

s="\
set xlabel 'Throughput (Mbps)'
set ylabel 'CDF'
set grid
set xrange [0:30]
set yrange [0:100]
set key right bottom
set title 'CDF'

set style line 1 lt 1 lc rgb \"red\"
set style line 2 lt 2 lc rgb \"royalblue\"
set style line 3 lt 3 lc rgb \"forest-green\"
set style line 4 lt 4 lc rgb \"dark-magenta\"
set style line 5 lt 5 lc rgb \"gray\"
set style line 6 lt 6 lc rgb \"black\"

plot "
o="1"

args=()
lastparpar=""
lastpar=""
parshared=1
parparshared=1
for arg; do
  if [[ ! -e "$arg" ]]; then
    echo -e "\e[31m$arg: No such data file\e[0m" >> /dev/stderr
    continue
  fi

  d="$(dirname "$(realpath "$arg")")"
  par="$(basename "$d")"
  parpar="$(basename "$(dirname "$d")")"

  if [[ -z "$lastpar" ]]; then
    lastpar="$par"
  elif [[ $lastpar != "$par" ]]; then
    parshared=0
  fi

  if [[ -z "$lastparpar" ]]; then
    lastparpar="$parpar"
  elif [[ $lastparpar != "$parpar" ]]; then
    parparshared=0
  fi

  args+=("$arg")
done

if [[ ${#args[@]} -eq 0 ]]; then
  echo -e "\e[31mNo data files to plot, giving up...\e[0m" >> /dev/stderr
  exit 1
fi

out=()
uniqs=()
for f in "${args[@]}"; do
  f="$(realpath "$f")"
  datname="$(basename "$f")"
  datname="${datname%.dat}"
  dir="$(dirname "$f")"
  dirname="$(basename "$dir")"

  uniq=""
  if ((parshared)); then
    if [[ -e "$dir/iwconfig.log" ]]; then
      uniq="$(if2ap "$dir" "$datname")"
    fi

    if [[ -z "$uniq" ]]; then
      uniq="$datname"
    fi
  elif ((parparshared)); then
    if [[ -e "$dir/iwconfig.log" ]]; then
      uniq="$(if2ap "$dir" "$datname")"
      uniq="$dirname-$uniq"
    else
      uniq="$dirname-$datname"
    fi
  fi

  file="$dir/cdf-$uniq-$o.dat"
  if [[ ! -e "$file" ]]; then
    runr "$f" > "$file"
  fi

  out+=("$file")
  uniqs+=("$uniq")
  ((o++))
done

mapfile -t < <(printf "%s\0" "${out[@]}" | sort -z | xargs -0n1)
((o=1))
for f in "${MAPFILE[@]}"; do
  origi=0
  for orig in "${out[@]}"; do
    [[ $orig == "$f" ]] && break
    ((origi++))
  done

  s="$s \\
  '$f' using (8*\$1/1048576):(\$2*100) title '${uniqs[$origi]}' with lines ls ($o),"
  ((o++))
done

((display)) || exit 0

s="${s%,}"
s="$(echo "$s" | sed 's|/home/[^/]*/|~/|g')"

if ((parshared)); then
  s="$(echo "$s" | sed "s|set title '\\(.*\\)'|set title '\\1 $lastpar'|")"
elif ((parparshared)); then
  s="$(echo "$s" | sed "s|set title '\\(.*\\)'|set title '\\1 $lastparpar'|")"
fi

echo "$s" | gnuplot -p - > /dev/null 2>&1
echo "$s"

# vim:textwidth=0:
