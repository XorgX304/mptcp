#!/usr/bin/perl
use strict;
use warnings;
use File::stat;

die "Usage: $0 <testdir>\n" unless @ARGV > 0;
$| = 1;

my $int = 300;
chdir $ARGV[0] or die "Test directory could not be accessed: $!";

die "Test directory missing stats.log.gz, exiting...\n" if not -e 'stats.log.gz';

if (-e "totals.dat") {
  my $thisstat = stat($0);
  my $thatstat = stat("totals.dat");
  # If the file was generated after mp-analyze was last modified,
  # there's no need to rerun mp-analyze
  exit 0 if $thatstat->mtime gt $thisstat->mtime;
}

my %ifaces = ();
open my $iwc, '<', 'iwconfig.log';
while (<$iwc>) {
  next if /^\s/;
  next if /ESSID:off/;
  /^(\S+).*ESSID:"([^"]+)"/;
  $ifaces{$1} = {essid => $2, data => ""};
  open $ifaces{$1}->{'file'}, '>', "$1.dat";
}
close $iwc;

my %tcpexts = ();
my @exts;
my $uname = "";
open my $stack, '<', 'stack.log';
while (<$stack>) {
  $uname = $_ if /GNU\/Linux/;
  next unless /^TcpExt:/;
  @exts = split / /;
  shift @exts;
}
close $stack;

if (not @exts) {
  if (0) {
    # guesstimate based on src/net/ipv4/proc.c
  } elsif ($uname =~ /\b3\.10\./) {
    @exts=("SyncookiesSent", "SyncookiesRecv", "SyncookiesFailed", "EmbryonicRsts", "PruneCalled", "RcvPruned", "OfoPruned", "OutOfWindowIcmps", "LockDroppedIcmps", "ArpFilter", "TW", "TWRecycled", "TWKilled", "PAWSPassive", "PAWSActive", "PAWSEstab", "DelayedACKs", "DelayedACKLocked", "DelayedACKLost", "ListenOverflows", "ListenDrops", "TCPPrequeued", "TCPDirectCopyFromBacklog", "TCPDirectCopyFromPrequeue", "TCPPrequeueDropped", "TCPHPHits", "TCPHPHitsToUser", "TCPPureAcks", "TCPHPAcks", "TCPRenoRecovery", "TCPSackRecovery", "TCPSACKReneging", "TCPFACKReorder", "TCPSACKReorder", "TCPRenoReorder", "TCPTSReorder", "TCPFullUndo", "TCPPartialUndo", "TCPDSACKUndo", "TCPLossUndo", "TCPLostRetransmit", "TCPRenoFailures", "TCPSackFailures", "TCPLossFailures", "TCPFastRetrans", "TCPForwardRetrans", "TCPSlowStartRetrans", "TCPTimeouts", "TCPLossProbes", "TCPLossProbeRecovery", "TCPRenoRecoveryFail", "TCPSackRecoveryFail", "TCPSchedulerFailed", "TCPRcvCollapsed", "TCPDSACKOldSent", "TCPDSACKOfoSent", "TCPDSACKRecv", "TCPDSACKOfoRecv", "TCPAbortOnData", "TCPAbortOnClose", "TCPAbortOnMemory", "TCPAbortOnTimeout", "TCPAbortOnLinger", "TCPAbortFailed", "TCPMemoryPressures", "TCPSACKDiscard", "TCPDSACKIgnoredOld", "TCPDSACKIgnoredNoUndo", "TCPSpuriousRTOs", "TCPMD5NotFound", "TCPMD5Unexpected", "TCPSackShifted", "TCPSackMerged", "TCPSackShiftFallback", "TCPBacklogDrop", "TCPMinTTLDrop", "TCPDeferAcceptDrop", "IPReversePathFilter", "TCPTimeWaitOverflow", "TCPReqQFullDoCookies", "TCPReqQFullDrop", "TCPRetransFail", "TCPRcvCoalesce", "TCPOFOQueue", "TCPOFODrop", "TCPOFOMerge", "TCPChallengeACK", "TCPSYNChallenge", "TCPFastOpenActive", "TCPFastOpenPassive", "TCPFastOpenPassiveFail", "TCPFastOpenListenOverflow", "TCPFastOpenCookieReqd", "TCPSpuriousRtxHostQueues");
  } elsif ($uname =~ /\b3\.5/) {
    @exts=("SyncookiesSent", "SyncookiesRecv", "SyncookiesFailed", "EmbryonicRsts", "PruneCalled", "RcvPruned", "OfoPruned", "OutOfWindowIcmps", "LockDroppedIcmps", "ArpFilter", "TW", "TWRecycled", "TWKilled", "PAWSPassive", "PAWSActive", "PAWSEstab", "DelayedACKs", "DelayedACKLocked", "DelayedACKLost", "ListenOverflows", "ListenDrops", "TCPPrequeued", "TCPDirectCopyFromBacklog", "TCPDirectCopyFromPrequeue", "TCPPrequeueDropped", "TCPHPHits", "TCPHPHitsToUser", "TCPPureAcks", "TCPHPAcks", "TCPRenoRecovery", "TCPSackRecovery", "TCPSACKReneging", "TCPFACKReorder", "TCPSACKReorder", "TCPRenoReorder", "TCPTSReorder", "TCPFullUndo", "TCPPartialUndo", "TCPDSACKUndo", "TCPLossUndo", "TCPLostRetransmit", "TCPRenoFailures", "TCPSackFailures", "TCPLossFailures", "TCPFastRetrans", "TCPForwardRetrans", "TCPSlowStartRetrans", "TCPTimeouts", "TCPRenoRecoveryFail", "TCPSackRecoveryFail", "TCPSchedulerFailed", "TCPRcvCollapsed", "TCPDSACKOldSent", "TCPDSACKOfoSent", "TCPDSACKRecv", "TCPDSACKOfoRecv", "TCPAbortOnSyn", "TCPAbortOnData", "TCPAbortOnClose", "TCPAbortOnMemory", "TCPAbortOnTimeout", "TCPAbortOnLinger", "TCPAbortFailed", "TCPMemoryPressures", "TCPSACKDiscard", "TCPDSACKIgnoredOld", "TCPDSACKIgnoredNoUndo", "TCPSpuriousRTOs", "TCPMD5NotFound", "TCPMD5Unexpected", "TCPSackShifted", "TCPSackMerged", "TCPSackShiftFallback", "TCPBacklogDrop", "TCPMinTTLDrop", "TCPDeferAcceptDrop", "IPReversePathFilter", "TCPTimeWaitOverflow", "TCPReqQFullDoCookies", "TCPReqQFullDrop", "TCPRetransFail", "TCPRcvCoalesce");
  }
}
my $i = 0;
%tcpexts = map { $_ => $i++ } @exts;

my %iptoif = ();
open my $ips, '<', 'ips.log';
my $if;
while (<$ips>) {
  $if = $1 if /^\d+: (.*?):/ and defined $ifaces{$1};
  next if not defined $if;
  if (/inet (.*?)\//) {
    $ifaces{$if}->{'ip'} = $1;
    $iptoif{$ifaces{$if}->{'ip'}} = $if;
  } else {
    next;
  }
}
close $ips;

my %last = ();

my $reads=`zcat stats.log.gz | grep -P '^\\.\$' | wc -l`;
my $line=0;

my $time = 0;
my $rmod = 0;
my %ran5 = ();
my $perc = -1;
my $start;
my $end;
printf "Analyzing: [%s] [00.0%%]\r", '-' x 100;
open my $stats, '-|', 'zcat stats.log.gz';
open my $total, '>', 'totals.dat';
while (<$stats>) {
  if (/^\;$/) {
    $rmod++;
    next;
  }

  if (/^\.$/) {
    $rmod = 0;
    # loop through tcpdumps up to this point
    # calculate distribution and print

    foreach $if (keys %ifaces) {
      $ifaces{$if}->{'data'} .= "0 0 0 0 0 " if not defined $ran5{$if};
    }
    %ran5 = ();

    my $tdiff = 0;
    $tdiff = $end - $start if defined $start;
    foreach $if (values %ifaces) {
      if (defined $start) {
        my $o = $if->{'out'} > 0 ? 100*$if->{'out'}/$last{'out_total'} : 0;
        my $i = $if->{'in'} > 0 ? 100*$if->{'in'}/$last{'in_total'} : 0;
        my $ot = $if->{'out'}/$tdiff;
        my $it = $if->{'in'}/$tdiff;
        $if->{'data'} .= sprintf "%.1f %.1f %.1f %.1f\n", $o, $i, $ot, $it;
      } else {
        $if->{'data'} .= "0 0 0 0\n";
      }
    }
    $start = $end;

    if ($tdiff > 0) {
      printf $total "%f %.1f %.1f\n", $end, $last{'out_total'}/$tdiff, $last{'in_total'}/$tdiff;
    }
    $last{'in_total'} = 0;
    $last{'out_total'} = 0;

    foreach $if (values %ifaces) {
      my $f = $if->{'file'};
      print $f $if->{'data'};
      $if->{'data'} = "";
    }

    my $p = (100.0 * $line)/$reads;
    if ($p != $perc) {
      printf "Analyzing: [%s%s] [%2.1f%%]\r", '#' x int($p), '-' x (100-int($p)), $p;
      $perc = $p;
    }
    $line++;
    next;
  }

  if (0) { # to align below
  } elsif ($rmod == 0) {
    # date
    /^(\d+\.\d+)$/;
    $time = $1;
    $end = $time;

    foreach $if (values %ifaces) {
      $if->{'data'} .= sprintf "%f ", $1;
    }
  } elsif ($rmod == 1) {
    # iwconfig
    # iface,frequency,bssid,speed,txpower,link-quality,signal-level
    my @d = split /,/;
    $if = $d[0];

    $d[3] =~ /^(\d+)/;
    my $speed = $1;

    $d[6] =~ /^(-\d+)/;
    my $sgnl = $1;

    $ifaces{$if}->{'data'} .= sprintf "%d %d ", $speed, $sgnl;
  } elsif ($rmod == 2) {
    # /proc/net/dev
    # iface,rx-b,rx-p,rx-err,rx-drop,#,#,#,#,tx-b,tx-p,tx-err,...
    my @d = split /,/;
    $if = $d[0];
    next if not defined $ifaces{$if};

    my $in = $d[1];
    $in = 0 if not defined $last{"in-$if"};
    $in -= $last{"in-$if"} if defined $last{"in-$if"};
    $last{"in-$if"} = $d[1];

    my $out = $d[9];
    $out = 0 if not defined $last{"out-$if"};
    $out -= $last{"out-$if"} if defined $last{"out-$if"};
    $last{"out-$if"} = $d[9];

    $last{'in_total'} += $in;
    $last{'out_total'} += $out;
    $ifaces{$if}->{'in'} = $in;
    $ifaces{$if}->{'out'} = $out;
  } elsif ($rmod == 3) {
    # /proc/net/wireless
    # iface,status,link,level,noise,err-nwid,err-crypt,err-frag,err-retry,err-misc,missed,WE
    my @d = split /,/;
    $if = $d[0];
    if (not defined $ifaces{$if}) {
      next;
    }

    my $retry = $d[8];
    $retry = 0 if not defined $last{"retry-$if"}; # So we don't have an initial spike
    $retry -= $last{"retry-$if"} if defined $last{"retry-$if"};
    $last{"retry-$if"} = $d[8];

    my $misc = $d[9];
    $misc = 0 if not defined $last{"misc-$if"};
    $misc -= $last{"misc-$if"} if defined $last{"misc-$if"};
    $last{"misc-$if"} = $d[9];

    $ifaces{$if}->{'data'} .= sprintf "%d %d ", $retry, $misc;
  } elsif ($rmod == 4) {
    # /proc/net/netstat
    my @d = split / /;

    my $fast_rt = $d[$tcpexts{'TCPFastRetrans'}];
    my $timeout = $d[$tcpexts{'TCPTimeouts'}];

    $fast_rt = 0 if not defined $last{'fast-rt'};
    $timeout = 0 if not defined $last{'timeout'};

    $fast_rt -= $last{'fast-rt'} if defined $last{'fast-rt'};
    $timeout -= $last{'timeout'} if defined $last{'timeout'};

    $last{'fast-rt'} = $d[$tcpexts{'TCPFastRetrans'}];
    $last{'timeout'} = $d[$tcpexts{'TCPTimeouts'}];

    foreach $if (values %ifaces) {
      $if->{'data'} .= sprintf "%d %d ", $fast_rt, $timeout;
    }
  } elsif ($rmod == 5) {
    # ss -inot
    if (/^\S/) {
      # connection line
      my $ip;
      my $line = $_;
      $if = undef;
      foreach ($line =~ /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/g) {
        $ip = $_;
        next if not defined $iptoif{$ip};
        $if = $iptoif{$ip};
        last;
      }
      # Don't include control port
      $if = undef if /:12865/;
      # or SSH
      $if = undef if /:22\b/;
      # or IPv6
      $if = undef if /::ffff:/;

      /^[^ ]+\s*(\d+)\s*(\d+)/;
      $ifaces{$if}->{'data'} .= sprintf "%d %d ", $1, $2 if defined $if and not defined $ran5{$if};
    } elsif (defined $if and not defined $ran5{$if} and /rtt:/) {
      # extended info line
      /rtt:([\d\.]+)/;
      $ifaces{$if}->{'data'} .= sprintf "%d ", $1;
      if (/rcv_rtt:([\d\.]+)/) {
        $ifaces{$if}->{'data'} .= sprintf "%d ", $1;
      } else {
        $ifaces{$if}->{'data'} .= "0 ";
      }
      /cwnd:([\d\.]+)/;
      $ifaces{$if}->{'data'} .= sprintf "%d ", $1;
      $ran5{$if} = 1;
    } elsif (defined $if and /rtt:/) {
      printf "\nFound multiple rtt readings at line $.\n";
    }
  }
}

foreach $if (values %ifaces) {
  my $f = $if->{'file'};
  close $f;
}
close $total;

printf "Analyzing: [%s] [DONE!]\n", '#' x 100;
