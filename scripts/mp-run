#!/bin/bash
testlength=600
printinterval=60

inittestlength=$testlength
direction=$1
both="no"
base=`dirname $0`
base=`realpath $base`

if [[ $UID -eq 0 ]]; then
  echo -e "\e[31mThis script should not be run as root\e[0m"
fi

if [[ -z $1 ]]; then
  echo "Usage: $0 <down|up|both> [server] [floor]"
  exit 1
fi

# Make the user type her password as early as possible
sudo echo -n

if [[ $direction == 'both' ]]; then
  direction="up"
  both="yes"
fi

echo -e "==> Preparing \e[37m${direction}link\e[0m test\e[0m"

echo -en "  -> Finding primary local IP: "
ip=`ip addr | grep "inet " | grep -v " 127." | sed 's/^[^0-9]*\([0-9\.]\+\).*$/\1/' | head -n1`

if [[ -z $ip ]]; then
  echo -e "\e[1;5;31mnone found!\e[0m"
  exit 1
else
  echo -e "\e[37m$ip\e[0m"
fi

if [[ -z $2 ]]; then
  if [[ ! -z `echo $ip | grep -P "^128\.16\.8"` ]]; then
    echo -e "  -> Running mp-routes"
    echo "-----------------------------------------"
    $base/mp-routes
    echo "-----------------------------------------"
  else
    echo -e "\e[37m  -> Not running mp-routes outside 128.16.80.0/22\e[0m"
  fi
fi

if [[ -z $2 ]]; then
  echo -en "==> Detecting testing server: "
  ap=`iwconfig 2>/dev/null | grep "ESSID:" | grep -E "fry-wifi|zoidberg-wifi" | sed 's/^.*ESSID:"\(.*\)-wifi".*$/\1/' | head -n1`

  if [[ -z $ap ]]; then
    echo -e "\e[1;31mundetectable\e[0m"
    echo -ne "\e[1m  ?? Use testing server \e[37m"
    read ap
    echo -en "\e[0m"
  else
    echo -e "\e[37m$ap\e[0m"
  fi
else
  ap=$2
  echo -e "==> Using testing server \e[37m$ap\e[0m"
fi

twofours=`iwconfig 2>/dev/null | grep "Freq" | grep ":2.4" | wc -l`
fives=`iwconfig 2>/dev/null | grep "Freq" | grep ":5." | wc -l`
testname="$USER-$ap-"

if [[ $fives -gt 1 ]]; then
  testname="${testname}5x$fives"
elif [[ $fives -gt 0 ]]; then
  testname="${testname}5"
fi

if [[ $twofours -gt 0 && $fives -gt 0 ]]; then
  testname="$testname-"
fi

if [[ $twofours -gt 1 ]]; then
  testname="${testname}2.4x$twofours"
  freqs=`iwconfig 2>/dev/null | grep "Freq" | grep ":2.4" | sed 's/.*Frequency:2\.\([0-9\.]*\).*/\1/'`
  freqs=($freqs)
  if [[ ${freqs[0]} -eq ${freqs[1]} ]]; then
    testname="${testname}-i"
  else
    testname="${testname}-ni"
  fi
elif [[ $twofours -gt 0 ]]; then
  testname="${testname}2.4"
fi

echo -e "==> Preparing test folder \e[37m$testname-$direction\e[0m"

if [[ -e "$testname-$direction" ]]; then
  cnt=`ls | grep "$testname" | grep -- "-$direction" | wc -l`
  testname="$testname@$cnt"
  echo -e "\e[33m  -> Old version found, calling this $testname-$direction\e[0m"
fi

mkdir -p "$testname-$direction"
cd "$testname-$direction"

echo -e "==> Noting test context"

echo -en "  -> Stack info...\t\t\t"
uname -a > stack.log
echo "tcp_congestion_control" >> stack.log
cat /proc/sys/net/ipv4/tcp_congestion_control >> stack.log
echo "remote tcp_congestion_control" >> stack.log
ssh $ap cat /proc/sys/net/ipv4/tcp_congestion_control >> stack.log
echo "tcp_mem" >> stack.log
cat /proc/sys/net/ipv4/tcp_mem >> stack.log
echo "tcp_wmem" >> stack.log
cat /proc/sys/net/ipv4/tcp_wmem >> stack.log
echo "wmem_default" >> stack.log
cat /proc/sys/net/core/wmem_default >> stack.log
echo "wmem_max" >> stack.log
cat /proc/sys/net/core/wmem_max >> stack.log
echo "/proc/net/netstat fields" >> stack.log
cat /proc/net/netstat | head -n 1 >> stack.log
echo -e "\e[37m done\e[0m"

echo -en "  -> IP addresses...\t\t\t"
ip addr > ips.log
echo -e "\e[37m done\e[0m"

echo -en "  -> Wireless connection details...\t"
iwconfig 2>/dev/null > iwconfig.log
echo -e "\e[37m done\e[0m"

is=`iwconfig 2>&1 | grep ESSID | grep -v off | sed 's/^\([^ ]\+\) .*/\1/' | sort | head -n1`
echo -en "  -> Wireless environment...\t\t"
sudo iwlist $is scan > iwlist.log
echo -e "\e[37m done\e[0m"

if [[ -z $3 ]]; then
  echo -en "\e[1m  ?? Enter floor:\t\t\t\e[37m  th\e[0m"
  echo -en "\r\e[1m  ?? Enter floor:\t\t\t\e[37m "
  read floor
  echo -en "\e[0m"
else
  floor=$3
fi

echo -en "  -> Test report outline...\t\t";
echo -n "TEST NAME: $testname
DONE BY: `whoami`@`hostname`

TEST TIME: `date`
TEST LOCATION: ${floor}TH FLOOR MPEB
TEST DURATION: 1.5 HOURS" > test.txt
echo -e "\e[37m done\e[0m"

echo -e "==> Sanitizing environment"

if [[ ! -z `pidof dropbox` ]]; then
  echo -ne "  -> Stopping dropbox...\t\t"
  pkill dropbox
  echo -e "\e[37m done\e[0m"
fi

echo -e "==> Starting services"

netserver_started=`pidof netserver`
if [[ $direction == "down" && -z "$netserver_started" ]]; then
  echo -ne "  -> Starting local netserver...\t"
  netserver > /dev/null 2> /dev/null
  netserver_started=1
  echo -e "\e[37m done\e[0m"
else
  netserver_started=0
fi

echo -en "  -> Starting stats gatherer...\t\t"
$base/mp-stats .5s $ap > stats.log &
stats_pid=$!
echo -e "\e[37m done\e[0m"

if [[ $direction == "down" ]]; then
  echo -ne "==> Running performance test (remote)"
else
  echo -ne "==> Running performance test"
fi
echo -e " for \e[37m$testlength/$printinterval\e[0m seconds"

err=1
echo "" > perf.log
while [[ $err -gt 0 ]]; do
  begin=`date +%s`
  echo -ne "\e[34m"

  if [[ $direction == "down" ]]; then
    ssh msc@$ap netperf -P 0 -H $ip -l $testlength -D $printinterval | tee -a perf.log
    err=${PIPESTATUS[0]}
  else
    netperf -P 0 -H $ap -l $testlength -D $printinterval | tee -a perf.log
    err=${PIPESTATUS[0]}
  fi

  echo -ne "\e[0m"

  if [[ $err -gt 0 ]]; then
    end=`date +%s`
    testlength=`echo "$testlength-($end-$begin)" | bc`
    echo -e "\e[1;31mTest interrupted with ${testlength}s left"
    echo -ne "Press enter to continue or Ctrl+D to end test\e[0m"
    read

    if [[ $? -gt 0 ]]; then
      echo
      break
    fi

    echo -e "==> Running test for another \e[37m$testlength\e[0m seconds"
  fi
done

# sudo might have timed out by now
sudo echo -n

echo -e "==> Stopping services..."

echo -en "  -> Stopping stats gatherer...\t\t"
kill $stats_pid
wait $stats_pid 2>/dev/null # http://stackoverflow.com/a/5722850
echo -e "\e[37m done\e[0m"

if [[ $netserver_started -gt 0 ]]; then
  echo -en "  -> Stopping local netserver...\t"
  pkill netserver
  echo -e "\e[37m done\e[0m"
fi

echo -e "==> Compressing data..."

echo -en "  -> Compressing iwlist...\t\t"
gzip -f8 iwlist.log
echo -e "\e[37m done\e[0m"

echo -en "  -> Compressing stats...\t\t"
gzip -f8 stats.log
echo -e "\e[37m done\e[0m"

if [[ $err -gt 0 ]]; then
  if [[ $testlength -eq $inittestlength ]]; then
    echo -e "\e[31m==> Test failed to run =(\e[0m"
  else
    echo -e "\e[33m==> Test only partially completed =/\e[0m"
  fi
else
  echo -e "\e[32m==> Test completed successfully =)\e[0m"
fi

if [[ $both == 'yes' ]]; then
  if [[ $err -gt 0 ]]; then
    echo -e "\e[33m==> Not running downlink test after premature exit\e[0m"
  else
    cd ..
    echo
    $base/mp-run down $ap $floor
  fi
fi
